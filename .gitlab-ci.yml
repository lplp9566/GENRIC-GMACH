image: node:18

stages:
  - test
  - build

# Cache עוזר, אבל לא מחליף npm ci
cache:
  key:
    files:
      - back-end/package-lock.json
      - front-end/package-lock.json
  paths:
    - back-end/node_modules/
    - front-end/node_modules/

# ---------- TEST ----------
test_backend:
  stage: test
  before_script:
    - cd back-end
    - npm ci            # מתקין חבילות (כולל jest)
  script:
    - npm run test -- --runInBand
  artifacts:
    when: always
    paths:
      - back-end/coverage/
    expire_in: 1 week

# אם תרצה גם טסטים לפרונט, בטל הערות ותוודא שיש script "test" בפרונט
# test_frontend:
#   stage: test
#   before_script:
#     - cd front-end
#     - npm ci
#   script:
#     - npm run test
#   artifacts:
#     when: always
#     paths:
#       - front-end/coverage/
#     expire_in: 1 week

# ---------- BUILD ----------
build_backend:
  stage: build
  needs: ["test_backend"]     # בונה רק אחרי שהטסטים עברו
  before_script:
    - cd back-end
    - npm ci
  script:
    - npm run build
  artifacts:
    paths:
      - back-end/dist/
    expire_in: 1 week

build_frontend:
  stage: build
  # אם אין תלות הדדית, אין צורך ב-needs. אם יש – הוסף needs בהתאם.
  before_script:
    - cd front-end
    - npm ci
  script:
    # אם יש לך script build ב-package.json זה עדיף:
    - npm run build
    # אם בכל זאת חייבים tsc, ודא שיש tsconfig מתאים:
    # - npx tsc --noEmit
  artifacts:
    paths:
      - front-end/dist/
    expire_in: 1 week
